global_cflags = ARGUMENTS.get('CFLAGS', '-Wall -Wextra -O2 -fomit-frame-pointer')
global_cxxflags = ARGUMENTS.get('CXXFLAGS', global_cflags + ' -fno-exceptions -fno-rtti -std=c++11')
global_defines = ' -DHAVE_STDINT_H'
vars = Variables()
vars.Add('CC')
vars.Add('CXX')

import os
env = Environment(ENV = os.environ,
                  CPPPATH = ['src', 'include', '../common'],
                  CFLAGS = global_cflags + global_defines,
                  CXXFLAGS = global_cxxflags + global_defines,
                  variables = vars)

sourceFiles = Split('''
			src/bitmap_font.cpp
			src/cpu.cpp
			src/gambatte.cpp
			src/initstate.cpp
			src/interrupter.cpp
			src/interruptrequester.cpp
			src/loadres.cpp
			src/memory.cpp
			src/newstate.cpp
			src/sound.cpp
			src/state_osd_elements.cpp
			src/statesaver.cpp
			src/tima.cpp
			src/video.cpp
			src/mem/camera.cpp
			src/mem/cartridge.cpp
			src/mem/huc3_chip.cpp
			src/mem/infrared.cpp
			src/mem/memptrs.cpp
			src/mem/pakinfo.cpp
			src/mem/remote.cpp
			src/mem/rtc.cpp
			src/mem/sgb.cpp
			src/mem/time.cpp
			src/mem/mbc/huc1.cpp
			src/mem/mbc/huc3.cpp
			src/mem/mbc/m161.cpp
			src/mem/mbc/mbc0.cpp
			src/mem/mbc/mbc1.cpp
			src/mem/mbc/mbc2.cpp
			src/mem/mbc/mbc3.cpp
			src/mem/mbc/mbc5.cpp
			src/mem/mbc/mmm01.cpp
			src/mem/mbc/pocket_camera.cpp
			src/mem/mbc/wisdom_tree.cpp
			src/mem/snes_spc/dsp.cpp
			src/mem/snes_spc/SNES_SPC.cpp
			src/mem/snes_spc/SNES_SPC_misc.cpp
			src/mem/snes_spc/SNES_SPC_state.cpp
			src/mem/snes_spc/spc.cpp
			src/mem/snes_spc/SPC_DSP.cpp
			src/mem/snes_spc/SPC_Filter.cpp
			src/sound/channel1.cpp
			src/sound/channel2.cpp
			src/sound/channel3.cpp
			src/sound/channel4.cpp
			src/sound/duty_unit.cpp
			src/sound/envelope_unit.cpp
			src/sound/length_counter.cpp
			src/video/ly_counter.cpp
			src/video/lyc_irq.cpp
			src/video/next_m0_time.cpp
			src/video/ppu.cpp
			src/video/sprite_mapper.cpp
		   ''')

conf = env.Configure()

if not bool(ARGUMENTS.get('NO_ZIP', 0)) and conf.CheckHeader('zlib.h'):
	sourceFiles.append('src/file/unzip/unzip.c')
	sourceFiles.append('src/file/unzip/ioapi.c')
	sourceFiles.append('src/file/file_zip.cpp')
	env.Append(CCFLAGS = ' -DHAVE_ZLIB_H')
	sys_libs = ['z']
else:
	sourceFiles.append('src/file/file.cpp')
	sourceFiles.append('src/file/crc32.cpp')
	sys_libs = []

conf.Finish()

lib = env.Library('gambatte', sourceFiles)

def rev():
	try:
		from subprocess import check_output, CalledProcessError
		stdout = check_output(['git', 'rev-list', 'HEAD', '--count'])
		return ' -DREVISION=' + stdout.decode().strip()
	except (OSError, CalledProcessError):
		return ' -DREVISION=-1'

import sys
if sys.platform == 'darwin':
	sys_libs.append('System')

shlib = env.SharedLibrary('gambatte', sourceFiles + ['src/cinterface.cpp'],
                          CXXFLAGS = env['CXXFLAGS'] + ' -DSHLIB' + rev(),
                          LINKFLAGS = env['LINKFLAGS'] + ' -s',
                          LIBS = sys_libs,
                          SHLIBPREFIX = "lib")

env.Default(lib)
env.Alias('shlib', shlib)
